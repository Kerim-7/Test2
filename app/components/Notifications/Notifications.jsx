'use client';

import { useState, useEffect, useCallback } from 'react';
import { useInView } from 'react-intersection-observer';
import styles from './Notifications.module.css';
import Skeleton from '../Skeleton/Skeleton';
import AvatarPlaceholder from '../AvatarPlaceholder/AvatarPlaceholder';
import ConfirmationModal from '../ConfirmationModal/ConfirmationModal';
import { useInfiniteNotifications } from '../../hooks/useInfiniteNotifications';

const mockNotifications = [
  {
    id: 1,
    type: 'like',
    user: {
      name: '–ê–ª–µ–∫—Å–µ–π –ü–µ—Ç—Ä–æ–≤',
      username: 'alexey_p',
      avatar: '/avatars/1.jpg'
    },
    content: '–í–∞—à –ø–æ—Å—Ç –æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è—Ö',
    timestamp: '2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥',
    isRead: false,
    isFollowing: false
  },
  {
    id: 2,
    type: 'comment',
    user: {
      name: '–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞',
      username: 'maria_i',
      avatar: '/avatars/2.jpg'
    },
    content: '–û—Å—Ç–∞–≤–∏–ª–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: "–û—Ç–ª–∏—á–Ω–∞—è —Å—Ç–∞—Ç—å—è!"',
    timestamp: '5 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥',
    isRead: true,
    isFollowing: true
  },
  {
    id: 3,
    type: 'repost',
    user: {
      name: '–ò–≤–∞–Ω –°–∏–¥–æ—Ä–æ–≤',
      username: 'ivan_s',
      avatar: '/avatars/3.jpg'
    },
    content: '–†–µ–ø–æ—Å—Ç–Ω—É–ª –≤–∞—à—É –∑–∞–ø–∏—Å—å',
    timestamp: '–≤—á–µ—Ä–∞',
    isRead: false,
    isFollowing: false
  },
  {
    id: 4,
    type: 'follow',
    user: {
      name: '–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –í–æ–ª–∫–æ–≤–∞',
      username: 'ekaterina_v',
      avatar: '/avatars/4.jpg'
    },
    content: '–ü–æ–¥–ø–∏—Å–∞–ª–∞—Å—å –Ω–∞ –≤–∞—Å',
    timestamp: '2 –¥–Ω—è –Ω–∞–∑–∞–¥',
    isRead: true,
    isFollowing: false
  },
  {
    id: 5,
    type: 'mention',
    user: {
      name: '–î–º–∏—Ç—Ä–∏–π –ö–æ–∑–ª–æ–≤',
      username: 'dmitry_k',
      avatar: '/avatars/5.jpg'
    },
    content: '–£–ø–æ–º—è–Ω—É–ª –≤–∞—Å –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏',
    timestamp: '3 –¥–Ω—è –Ω–∞–∑–∞–¥',
    isRead: false,
    isFollowing: true
  }
];

const Notifications = () => {
  const [activeTab, setActiveTab] = useState('all');
  const [actionLog, setActionLog] = useState([]);
  const [notifications, setNotifications] = useState([]);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [selectedNotificationId, setSelectedNotificationId] = useState(null);

  const {
    data,
    error,
    fetchNextPage,
    hasNextPage,
    isFetchingNextPage,
    isLoading,
    isError,
    refetch
  } = useInfiniteNotifications(5);

  const { ref: loadMoreRef, inView } = useInView({
    threshold: 0.1,
    rootMargin: '100px',
  });

  useEffect(() => {
    if (inView && hasNextPage && !isFetchingNextPage) {
      fetchNextPage();
    }
  }, [inView, hasNextPage, isFetchingNextPage, fetchNextPage]);

  useEffect(() => {
    if (data?.pages) {
      const allNotifications = data.pages.flatMap(page => page.notifications);
      setNotifications(allNotifications);
    }
  }, [data]);

  const filteredNotifications = notifications.filter(notification => {
    if (activeTab === 'all') return true;
    if (activeTab === 'communication') 
      return ['comment', 'mention'].includes(notification.type);
    if (activeTab === 'actions') 
      return ['like', 'repost', 'follow'].includes(notification.type);
    return true;
  });

  const getTabCount = (tabType) => {
    if (tabType === 'all') return notifications.length;
    if (tabType === 'communication') 
      return notifications.filter(n => ['comment', 'mention'].includes(n.type)).length;
    if (tabType === 'actions') 
      return notifications.filter(n => ['like', 'repost', 'follow'].includes(n.type)).length;
    return 0;
  };

  const handleUserClick = (e, user, notificationId) => {
    e?.stopPropagation?.();
    if (user && notificationId) {
      logAction(`–î–µ–π—Å—Ç–≤–∏–µ 1: –ö–ª–∏–∫ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.name} (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ${notificationId})`);
    }
  };

  const handleCardClick = (notificationId) => {
    logAction(`–î–µ–π—Å—Ç–≤–∏–µ 2: –ö–ª–∏–∫ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${notificationId}`);
    
    setNotifications(notifications.map(n => 
      n.id === notificationId ? {...n, isRead: true} : n
    ));
  };

  const handleMenuClick = (e, notificationId) => {
    e?.stopPropagation?.();
    if (notificationId) {
      setSelectedNotificationId(notificationId);
      setIsModalOpen(true);
      logAction(`–î–µ–π—Å—Ç–≤–∏–µ 3: –ö–ª–∏–∫ –ø–æ –º–µ–Ω—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${notificationId}`);
    }
  };

  const handleModalClose = () => {
    setIsModalOpen(false);
    setSelectedNotificationId(null);
  };

  const handleDeleteNotification = () => {
    if (selectedNotificationId) {
      setNotifications(notifications.filter(n => n.id !== selectedNotificationId));
      logAction(`–£–¥–∞–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ${selectedNotificationId}`);
    }
  };

  const handleFollowClick = (e, notificationId, currentStatus) => {
    e?.stopPropagation?.();
    if (notificationId !== undefined) {
      const newStatus = !currentStatus;
      logAction(`–ü–æ–¥–ø–∏—Å–∫–∞: ${newStatus ? '–ü–æ–¥–ø–∏—Å–∞–Ω' : '–û—Ç–ø–∏—Å–∞–Ω'} (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ${notificationId})`);
      
      setNotifications(notifications.map(n => 
        n.id === notificationId ? {...n, isFollowing: newStatus} : n
      ));
    }
  };

  const logAction = (message) => {
    setActionLog(prev => [...prev, `${new Date().toLocaleTimeString()}: ${message}`]);
  };

  const [isClient, setIsClient] = useState(false);

  useEffect(() => {
    setIsClient(true);
  }, []);

  if (!isClient) {
    return (
      <div className={styles.container}>
        <header className={styles.header}>
          <h1 className={styles.title}>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h1>
          <nav className={styles.tabs} role="tablist">
            <button className={`${styles.tab} ${styles.active}`}>–í—Å–µ</button>
            <button className={styles.tab}>–û–±—â–µ–Ω–∏–µ</button>
            <button className={styles.tab}>–î–µ–π—Å—Ç–≤–∏—è</button>
          </nav>
        </header>
        <main className={styles.content}>
          <Skeleton type="card" count={5} />
        </main>
      </div>
    );
  }

  return (
    <div className={styles.container} suppressHydrationWarning>
      <header className={styles.header}>
        <h1 className={styles.title}>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h1>
        <nav className={styles.tabs} role="tablist">
          <button 
            className={`${styles.tab} ${activeTab === 'all' ? styles.active : ''}`}
            role="tab"
            aria-selected={activeTab === 'all'}
            onClick={() => {
              setActiveTab('all');
              logAction('–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É "–í—Å–µ"');
            }}
          >
            –í—Å–µ ({getTabCount('all')})
          </button>
          <button 
            className={`${styles.tab} ${activeTab === 'communication' ? styles.active : ''}`}
            role="tab"
            aria-selected={activeTab === 'communication'}
            onClick={() => {
              setActiveTab('communication');
              logAction('–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É "–û–±—â–µ–Ω–∏–µ"');
            }}
          >
            –û–±—â–µ–Ω–∏–µ ({getTabCount('communication')})
          </button>
          <button 
            className={`${styles.tab} ${activeTab === 'actions' ? styles.active : ''}`}
            role="tab"
            aria-selected={activeTab === 'actions'}
            onClick={() => {
              setActiveTab('actions');
              logAction('–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É "–î–µ–π—Å—Ç–≤–∏—è"');
            }}
          >
            –î–µ–π—Å—Ç–≤–∏—è ({getTabCount('actions')})
          </button>
        </nav>
      </header>

      <main className={styles.content}>
        {isLoading ? (
          <Skeleton type="card" count={5} />
        ) : isError ? (
          <section className={styles.emptyState}>
            <div className={styles.emptyIcon} aria-hidden="true">‚ö†Ô∏è</div>
            <h2>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h2>
            <p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.</p>
            <button 
              onClick={() => refetch()}
              className={styles.retryButton}
            >
              –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            </button>
          </section>
        ) : filteredNotifications.length === 0 ? (
          <section className={styles.emptyState}>
            <div className={styles.emptyIcon} aria-hidden="true">üîî</div>
            <h2>–ü–æ–∫–∞ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏</h2>
            <p>–†–µ–ø–æ—Å—Ç—ã, –æ—Ç–º–µ—Ç–∫–∏ ¬´–ù—Ä–∞–≤–∏—Ç—Å—è¬ª –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ ‚Äî –∑–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –≤—Å–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º.</p>
          </section>
        ) : (
          <section className={styles.notificationsList} role="list">
            {filteredNotifications.map(notification => (
              <article 
                key={notification.id} 
                className={`${styles.notificationCard} ${!notification.isRead ? styles.unread : ''}`}
                onClick={() => handleCardClick(notification.id)}
                role="listitem"
              >
                <header className={styles.notificationHeader}>
                  <div className={styles.userInfo}>
                    <button 
                      className={styles.avatar}
                      onClick={(e) => handleUserClick(e, notification.user, notification.id)}
                      aria-label={`–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${notification.user.name}`}
                    >
                      {notification.user.avatar ? (
                        <>
                          <img 
                            src={notification.user.avatar} 
                            alt={notification.user.name}
                            onError={(e) => {
                              e.target.style.display = 'none';
                              if (e.target.nextSibling) {
                                e.target.nextSibling.style.display = 'flex';
                              }
                            }}
                          />
                          <AvatarPlaceholder 
                            size="medium" 
                            className={styles.placeholderHidden}
                          />
                        </>
                      ) : (
                        <AvatarPlaceholder 
                          size="medium" 
                          className={styles.placeholderVisible}
                        />
                      )}
                    </button>
                    <div className={styles.userDetails}>
                      <button 
                        className={styles.userName}
                        onClick={(e) => handleUserClick(e, notification.user, notification.id)}
                        aria-label={`–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${notification.user.name}`}
                      >
                        {notification.user.name}
                      </button>
                      <button 
                        className={styles.userUsername}
                        onClick={(e) => handleUserClick(e, notification.user, notification.id)}
                        aria-label={`–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @${notification.user.username}`}
                      >
                        @{notification.user.username}
                      </button>
                    </div>
                  </div>
                  
                  <div className={styles.actions}>
                    <button 
                      className={`${styles.followButton} ${notification.isFollowing ? styles.following : ''}`}
                      onClick={(e) => handleFollowClick(e, notification.id, notification.isFollowing)}
                      aria-label={notification.isFollowing ? '–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' : '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}
                    >
                      {notification.isFollowing ? '–ü–æ–¥–ø–∏—Å–∞–Ω' : '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è'}
                    </button>
                    <button 
                      className={styles.menuButton}
                      onClick={(e) => handleMenuClick(e, notification.id)}
                      aria-label="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è"
                    >
                      ‚ãÆ
                    </button>
                  </div>
                </header>
                
                <div className={styles.notificationContent}>
                  <p>{notification.content}</p>
                  <time className={styles.timestamp} dateTime={notification.timestamp}>{notification.timestamp}</time>
                </div>
                
              </article>
            ))}
            
            {isFetchingNextPage && (
              <div className={styles.loadingMore}>
                <Skeleton type="card" count={2} />
              </div>
            )}
            
            {hasNextPage && !isFetchingNextPage && (
              <div ref={loadMoreRef} className={styles.loadMoreTrigger}>
                <button 
                  onClick={() => fetchNextPage()}
                  className={styles.loadMoreButton}
                >
                  –ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ
                </button>
              </div>
            )}
            
            {!hasNextPage && notifications.length > 0 && (
              <div className={styles.endOfList}>
                <p>–í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</p>
              </div>
            )}
          </section>
        )}
      </main>
      
      <aside className={styles.actionLog}>
        <h3>–õ–æ–≥ –¥–µ–π—Å—Ç–≤–∏–π:</h3>
        <div className={styles.logEntries}>
          {actionLog.map((entry, index) => (
            <div key={index} className={styles.logEntry}>{entry}</div>
          ))}
        </div>
      </aside>

      <ConfirmationModal
        isOpen={isModalOpen}
        onClose={handleModalClose}
        onConfirm={handleDeleteNotification}
        title="–£–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
        message="–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ?"
        confirmText="–£–¥–∞–ª–∏—Ç—å"
        cancelText="–û—Ç–º–µ–Ω–∏—Ç—å"
      />
    </div>
  );
};

export default Notifications;
